﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
string ModelName="SysFile";
string ControllerName="SysFile";
string ServiceName="SysFileService";
string FileName="文件管理";
string ModelNameSpace="ZRAdmin.Controllers";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using Infrastructure.Attribute;
using Microsoft.AspNetCore.Mvc;
using ZRAdmin.Filters;
using ZR.Model;
using ZR.Model.System;
using ZR.Model.Vo;
using ZR.Service.IService;
using Infrastructure.Model;
using SqlSugar;
using Mapster;
using ZR.Model.Dto.System;
using Infrastructure.Enums;
using Infrastructure;
using ZRAdmin.Extensions;

namespace <#=ModelNameSpace#>
{
    /// <summary>
    /// T4代码自动生成
    /// </summary>
	
    [Verify]
    [Route("system/<#=ModelName#>")]
    public class <#=ControllerName#>1Controller: BaseController
	{
        /// <summary>
        /// <#=FileName#>接口
        /// </summary>
        private readonly I<#=ServiceName#> _<#=ServiceName#>;

        public <#=ControllerName#>1Controller(I<#=ServiceName#> <#=ServiceName#>)
        {
            _<#=ServiceName#> = <#=ServiceName#>;
        }

        /// <summary>
        /// 查询<#=FileName#>列表
        /// </summary>
        /// <returns></returns>
        [HttpGet("list")]
        //[ActionPermissionFilter(Permission = "system:<#=ModelName#>:list")]
        public IActionResult Query([FromQuery] <#=ModelName#>QueryDto parm)
        {
            //开始拼装查询条件
            var predicate = Expressionable.Create<<#=ModelName#>>();

            //TODO 搜索条件
            //predicate = predicate.And(m => m.Name.Contains(parm.Name));

            var response = _<#=ServiceName#>.GetPages(predicate.ToExpression(), parm);

            return SUCCESS(response);
        }

        /// <summary>
        /// 查询<#=FileName#>详情
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public IActionResult Get(string id)
        {
            var response = _<#=ServiceName#>.GetId(id);

            return SUCCESS(response);
        }

        /// <summary>
        /// 添加<#=FileName#>
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        //[ActionPermissionFilter(Permission = "system:<#=ModelName#>:add")]
        [Log(Title = "<#=FileName#>添加", BusinessType = BusinessType.INSERT)]
        public IActionResult Create([FromBody] <#=ModelName#> parm)
        {
            if (parm == null)
            {
                throw new CustomException("请求参数错误");
            }
            //从 Dto 映射到 实体
            var addModel = parm.Adapt<<#=ModelName#>>().ToCreate();
            //addModel.CreateID = User.Identity.Name;

            return SUCCESS(_<#=ServiceName#>.Add(addModel));
        }

        /// <summary>
        /// 更新<#=FileName#>
        /// </summary>
        /// <returns></returns>
        [HttpPut("edit")]
        //[ActionPermissionFilter(Permission = "system:<#=ModelName#>:update")]
        [Log(Title = "<#=FileName#>修改", BusinessType = BusinessType.UPDATE)]
        public IActionResult Update([FromBody] <#=ModelName#> parm)
        {
            //从 Dto 映射到 实体
            var addModel = parm.Adapt<<#=ModelName#>>().ToCreate();
            //addModel.CreateID = User.Identity.Name;
            //TODO 字段映射
            var response = _<#=ServiceName#>.Update(addModel);

            return SUCCESS(response);
        }

        /// <summary>
        /// 删除<#=FileName#>
        /// </summary>
        /// <returns></returns>
        [HttpDelete("{id}")]
        //[ActionPermissionFilter(Permission = "system:<#=ModelName#>:delete")]
        [Log(Title = "<#=FileName#>删除", BusinessType = BusinessType.DELETE)]
        public IActionResult Delete(int id = 0)
        {
            if (id <= 0) { return OutputJson(ApiResult.Error($"删除失败Id 不能为空")); }

            // 删除<#=FileName#>
            var response = _<#=ServiceName#>.Delete(id);

            return SUCCESS(response);
        }
	}
}