using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using SqlSugar;
using Infrastructure;
using Infrastructure.Attribute;
using Infrastructure.Enums;
using Infrastructure.Model;
using Mapster;
using {ModelsNamespace}.Dto;
using {ModelsNamespace}.Models;
using {ServicesNamespace}.Business;
using {ApiControllerNamespace}.Extensions;
using {ApiControllerNamespace}.Filters;

namespace {ApiControllerNamespace}.Controllers
{
    /// <summary>
    /// 代码自动生成
    /// </summary>
    [Verify]
    [Route("bus/{ModelName}")]
    public class {ModelName}Controller: BaseController
	{
        /// <summary>
        /// {TableDesc}接口
        /// </summary>
        private readonly I{ModelName}Service _{ModelName}Service;

        public {ModelName}Controller(I{ModelName}Service {ModelName}Service)
        {
            _{ModelName}Service = {ModelName}Service;
        }

        /// <summary>
        /// 查询{TableDesc}列表
        /// </summary>
        /// <returns></returns>
        [HttpGet("list")]
        [ActionPermissionFilter(Permission = "{Permission}:list")]
        public IActionResult Query{ModelName}([FromQuery] {ModelName}QueryDto parm)
        {
            //开始拼装查询条件
            var predicate = Expressionable.Create<{ModelName}>();

            //TODO 搜索条件
            //predicate = predicate.And(m => m.Name.Contains(parm.Name));

            var response = _{ModelName}Service.GetPages(predicate.ToExpression(), parm);

            return SUCCESS(response);
        }

        /// <summary>
        /// 查询{TableDesc}详情
        /// </summary>
        /// <param name="{PrimaryKey}"></param>
        /// <returns></returns>
        [HttpGet("{{PrimaryKey}}")]
        [ActionPermissionFilter(Permission = "{Permission}:query")]
        public IActionResult Get{ModelName}({KeyTypeName} {PrimaryKey})
        {
            var response = _{ModelName}Service.GetId({PrimaryKey});

            return SUCCESS(response);
        }

        /// <summary>
        /// 添加{TableDesc}
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        [ActionPermissionFilter(Permission = "{Permission}:add")]
        [Log(Title = "{TableDesc}添加", BusinessType = BusinessType.INSERT)]
        public IActionResult Add{ModelName}([FromBody] {ModelName}Dto parm)
        {
            if (parm == null)
            {
                throw new CustomException("请求参数错误");
            }
            //从 Dto 映射到 实体
            var addModel = parm.Adapt<{ModelName}>().ToCreate();

            return SUCCESS(_{ModelName}Service.Add(addModel));
        }

        /// <summary>
        /// 更新{TableDesc}
        /// </summary>
        /// <returns></returns>
        [HttpPut]
        [ActionPermissionFilter(Permission = "{Permission}:update")]
        [Log(Title = "{TableDesc}修改", BusinessType = BusinessType.UPDATE)]
        public IActionResult Update{ModelName}([FromBody] {ModelName}Dto parm)
        {
            if (parm == null)
            {
                throw new CustomException("请求实体不能为空");
            }
            //从 Dto 映射到 实体
            var updateModel = parm.Adapt<{ModelName}>().ToUpdate();

            var response = _{ModelName}Service.Update(w => w.{PrimaryKey} == updateModel.{PrimaryKey}, it => new {ModelName}()
            {
                //Update 字段映射
                {UpdateColumn}
            });

            return SUCCESS(response);
        }

        /// <summary>
        /// 删除{TableDesc}
        /// </summary>
        /// <returns></returns>
        [HttpDelete("{{PrimaryKey}}")]
        [ActionPermissionFilter(Permission = "{Permission}:delete")]
        [Log(Title = "{TableDesc}删除", BusinessType = BusinessType.DELETE)]
        public IActionResult Delete{ModelName}({KeyTypeName} {PrimaryKey} = 0)
        {
            if ({PrimaryKey} <= 0) { return OutputJson(ApiResult.Error($"删除失败Id 不能为空")); }

            var response = _{ModelName}Service.Delete({PrimaryKey});

            return SUCCESS(response);
        }
    }
}